// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fdw.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PostgresFdw {

  /// <summary>Holder for reflection information generated from fdw.proto</summary>
  public static partial class FdwReflection {

    #region Descriptor
    /// <summary>File descriptor for fdw.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FdwReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglmZHcucHJvdG8SC1Bvc3RncmVzRmR3Is8BChBDb2x1bW5EZWZpbml0aW9u",
            "EgwKBG5hbWUYASABKAkSCwoDb2lkGAIgASgFEgsKA21vZBgDIAEoBRIQCgh0",
            "eXBlTmFtZRgEIAEoCRIUCgxiYXNlVHlwZU5hbWUYBSABKAkSOwoHb3B0aW9u",
            "cxgGIAMoCzIqLlBvc3RncmVzRmR3LkNvbHVtbkRlZmluaXRpb24uT3B0aW9u",
            "c0VudHJ5Gi4KDE9wdGlvbnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIrsBCg9UYWJsZURlZmluaXRpb24SDAoEbmFtZRgBIAEoCRIu",
            "Cgdjb2x1bW5zGAIgAygLMh0uUG9zdGdyZXNGZHcuQ29sdW1uRGVmaW5pdGlv",
            "bhI6CgdvcHRpb25zGAMgAygLMikuUG9zdGdyZXNGZHcuVGFibGVEZWZpbml0",
            "aW9uLk9wdGlvbnNFbnRyeRouCgxPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ASLQAwoYSW1wb3J0Rm9yZWlnblNjaGVtYUlu",
            "cHV0Eg4KBnNjaGVtYRgBIAEoCRJPCg1zZXJ2ZXJPcHRpb25zGAIgAygLMjgu",
            "UG9zdGdyZXNGZHcuSW1wb3J0Rm9yZWlnblNjaGVtYUlucHV0LlNlcnZlck9w",
            "dGlvbnNFbnRyeRJPCg1pbXBvcnRPcHRpb25zGAMgAygLMjguUG9zdGdyZXNG",
            "ZHcuSW1wb3J0Rm9yZWlnblNjaGVtYUlucHV0LkltcG9ydE9wdGlvbnNFbnRy",
            "eRJOCg9yZXN0cmljdGlvblR5cGUYBCABKA4yNS5Qb3N0Z3Jlc0Zkdy5JbXBv",
            "cnRGb3JlaWduU2NoZW1hSW5wdXQuUmVzdHJpY3Rpb25UeXBlEhIKCnJlc3Ry",
            "aWN0ZWQYBSADKAkaNAoSU2VydmVyT3B0aW9uc0VudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAEaNAoSSW1wb3J0T3B0aW9uc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiMgoPUmVzdHJpY3Rpb25U",
            "eXBlEggKBE5PTkUQABIJCgVMSU1JVBABEgoKBkVYQ0VQVBACIkkKGUltcG9y",
            "dEZvcmVpZ25TY2hlbWFPdXRwdXQSLAoGdGFibGVzGAEgAygLMhwuUG9zdGdy",
            "ZXNGZHcuVGFibGVEZWZpbml0aW9uIr0BChdQZXJmb3JtRm9yZWlnblNjYW5J",
            "bnB1dBIuCgdjb2x1bW5zGAEgAygLMh0uUG9zdGdyZXNGZHcuQ29sdW1uRGVm",
            "aW5pdGlvbhJCCgdvcHRpb25zGAIgAygLMjEuUG9zdGdyZXNGZHcuUGVyZm9y",
            "bUZvcmVpZ25TY2FuSW5wdXQuT3B0aW9uc0VudHJ5Gi4KDE9wdGlvbnNFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIpoCCgNSb3cSLAoG",
            "ZmllbGRzGAEgAygLMhwuUG9zdGdyZXNGZHcuUm93LkZpZWxkc0VudHJ5GpoB",
            "CghSb3dWYWx1ZRIVCgtzdHJpbmdWYWx1ZRgBIAEoCUgAEhQKCmZsb2F0VmFs",
            "dWUYAiABKAJIABIVCgtkb3VibGVWYWx1ZRgDIAEoAUgAEhIKCGludFZhbHVl",
            "GAQgASgFSAASEwoJbG9uZ1ZhbHVlGAUgASgDSAASEwoJYm9vbFZhbHVlGAYg",
            "ASgISABCDAoKdGVzdF9vbmVvZhpICgtGaWVsZHNFbnRyeRILCgNrZXkYASAB",
            "KAkSKAoFdmFsdWUYAiABKAsyGS5Qb3N0Z3Jlc0Zkdy5Sb3cuUm93VmFsdWU6",
            "AjgBIjoKGFBlcmZvcm1Gb3JlaWduU2Nhbk91dHB1dBIeCgRyb3dzGAEgAygL",
            "MhAuUG9zdGdyZXNGZHcuUm93MtwBCgtQb3N0Z3Jlc0ZkdxJlChJQZXJmb3Jt",
            "Rm9yZWlnblNjYW4SJC5Qb3N0Z3Jlc0Zkdy5QZXJmb3JtRm9yZWlnblNjYW5J",
            "bnB1dBolLlBvc3RncmVzRmR3LlBlcmZvcm1Gb3JlaWduU2Nhbk91dHB1dCIA",
            "MAESZgoTSW1wb3J0Rm9yZWlnblNjaGVtYRIlLlBvc3RncmVzRmR3LkltcG9y",
            "dEZvcmVpZ25TY2hlbWFJbnB1dBomLlBvc3RncmVzRmR3LkltcG9ydEZvcmVp",
            "Z25TY2hlbWFPdXRwdXQiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PostgresFdw.ColumnDefinition), global::PostgresFdw.ColumnDefinition.Parser, new[]{ "Name", "Oid", "Mod", "TypeName", "BaseTypeName", "Options" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PostgresFdw.TableDefinition), global::PostgresFdw.TableDefinition.Parser, new[]{ "Name", "Columns", "Options" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PostgresFdw.ImportForeignSchemaInput), global::PostgresFdw.ImportForeignSchemaInput.Parser, new[]{ "Schema", "ServerOptions", "ImportOptions", "RestrictionType", "Restricted" }, null, new[]{ typeof(global::PostgresFdw.ImportForeignSchemaInput.Types.RestrictionType) }, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PostgresFdw.ImportForeignSchemaOutput), global::PostgresFdw.ImportForeignSchemaOutput.Parser, new[]{ "Tables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PostgresFdw.PerformForeignScanInput), global::PostgresFdw.PerformForeignScanInput.Parser, new[]{ "Columns", "Options" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PostgresFdw.Row), global::PostgresFdw.Row.Parser, new[]{ "Fields" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::PostgresFdw.Row.Types.RowValue), global::PostgresFdw.Row.Types.RowValue.Parser, new[]{ "StringValue", "FloatValue", "DoubleValue", "IntValue", "LongValue", "BoolValue" }, new[]{ "TestOneof" }, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PostgresFdw.PerformForeignScanOutput), global::PostgresFdw.PerformForeignScanOutput.Parser, new[]{ "Rows" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ColumnDefinition : pb::IMessage<ColumnDefinition> {
    private static readonly pb::MessageParser<ColumnDefinition> _parser = new pb::MessageParser<ColumnDefinition>(() => new ColumnDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PostgresFdw.FdwReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnDefinition(ColumnDefinition other) : this() {
      name_ = other.name_;
      oid_ = other.oid_;
      mod_ = other.mod_;
      typeName_ = other.typeName_;
      baseTypeName_ = other.baseTypeName_;
      options_ = other.options_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnDefinition Clone() {
      return new ColumnDefinition(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 2;
    private int oid_;
    /// <summary>
    /// the internal OID of the PostgreSQL type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { return oid_; }
      set {
        oid_ = value;
      }
    }

    /// <summary>Field number for the "mod" field.</summary>
    public const int ModFieldNumber = 3;
    private int mod_;
    /// <summary>
    /// the type modifier (ex: VARCHAR(12))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mod {
      get { return mod_; }
      set {
        mod_ = value;
      }
    }

    /// <summary>Field number for the "typeName" field.</summary>
    public const int TypeNameFieldNumber = 4;
    private string typeName_ = "";
    /// <summary>
    /// the formatted type name, with the modifier (ex: VARCHAR(12))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseTypeName" field.</summary>
    public const int BaseTypeNameFieldNumber = 5;
    private string baseTypeName_ = "";
    /// <summary>
    /// the base type name, withou modifier (ex: VARCHAR)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseTypeName {
      get { return baseTypeName_; }
      set {
        baseTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_options_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Oid != other.Oid) return false;
      if (Mod != other.Mod) return false;
      if (TypeName != other.TypeName) return false;
      if (BaseTypeName != other.BaseTypeName) return false;
      if (!Options.Equals(other.Options)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Oid != 0) hash ^= Oid.GetHashCode();
      if (Mod != 0) hash ^= Mod.GetHashCode();
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (BaseTypeName.Length != 0) hash ^= BaseTypeName.GetHashCode();
      hash ^= Options.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Oid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Oid);
      }
      if (Mod != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mod);
      }
      if (TypeName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TypeName);
      }
      if (BaseTypeName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BaseTypeName);
      }
      options_.WriteTo(output, _map_options_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Oid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (Mod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mod);
      }
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (BaseTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseTypeName);
      }
      size += options_.CalculateSize(_map_options_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Oid != 0) {
        Oid = other.Oid;
      }
      if (other.Mod != 0) {
        Mod = other.Mod;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.BaseTypeName.Length != 0) {
        BaseTypeName = other.BaseTypeName;
      }
      options_.Add(other.options_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Oid = input.ReadInt32();
            break;
          }
          case 24: {
            Mod = input.ReadInt32();
            break;
          }
          case 34: {
            TypeName = input.ReadString();
            break;
          }
          case 42: {
            BaseTypeName = input.ReadString();
            break;
          }
          case 50: {
            options_.AddEntriesFrom(input, _map_options_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TableDefinition : pb::IMessage<TableDefinition> {
    private static readonly pb::MessageParser<TableDefinition> _parser = new pb::MessageParser<TableDefinition>(() => new TableDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PostgresFdw.FdwReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinition(TableDefinition other) : this() {
      name_ = other.name_;
      columns_ = other.columns_.Clone();
      options_ = other.options_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinition Clone() {
      return new TableDefinition(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PostgresFdw.ColumnDefinition> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(18, global::PostgresFdw.ColumnDefinition.Parser);
    private readonly pbc::RepeatedField<global::PostgresFdw.ColumnDefinition> columns_ = new pbc::RepeatedField<global::PostgresFdw.ColumnDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PostgresFdw.ColumnDefinition> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_options_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (!Options.Equals(other.Options)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= columns_.GetHashCode();
      hash ^= Options.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      options_.WriteTo(output, _map_options_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += options_.CalculateSize(_map_options_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      columns_.Add(other.columns_);
      options_.Add(other.options_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 26: {
            options_.AddEntriesFrom(input, _map_options_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportForeignSchemaInput : pb::IMessage<ImportForeignSchemaInput> {
    private static readonly pb::MessageParser<ImportForeignSchemaInput> _parser = new pb::MessageParser<ImportForeignSchemaInput>(() => new ImportForeignSchemaInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportForeignSchemaInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PostgresFdw.FdwReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportForeignSchemaInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportForeignSchemaInput(ImportForeignSchemaInput other) : this() {
      schema_ = other.schema_;
      serverOptions_ = other.serverOptions_.Clone();
      importOptions_ = other.importOptions_.Clone();
      restrictionType_ = other.restrictionType_;
      restricted_ = other.restricted_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportForeignSchemaInput Clone() {
      return new ImportForeignSchemaInput(this);
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 1;
    private string schema_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schema {
      get { return schema_; }
      set {
        schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverOptions" field.</summary>
    public const int ServerOptionsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_serverOptions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> serverOptions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ServerOptions {
      get { return serverOptions_; }
    }

    /// <summary>Field number for the "importOptions" field.</summary>
    public const int ImportOptionsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_importOptions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> importOptions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ImportOptions {
      get { return importOptions_; }
    }

    /// <summary>Field number for the "restrictionType" field.</summary>
    public const int RestrictionTypeFieldNumber = 4;
    private global::PostgresFdw.ImportForeignSchemaInput.Types.RestrictionType restrictionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PostgresFdw.ImportForeignSchemaInput.Types.RestrictionType RestrictionType {
      get { return restrictionType_; }
      set {
        restrictionType_ = value;
      }
    }

    /// <summary>Field number for the "restricted" field.</summary>
    public const int RestrictedFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_restricted_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> restricted_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Restricted {
      get { return restricted_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportForeignSchemaInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportForeignSchemaInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Schema != other.Schema) return false;
      if (!ServerOptions.Equals(other.ServerOptions)) return false;
      if (!ImportOptions.Equals(other.ImportOptions)) return false;
      if (RestrictionType != other.RestrictionType) return false;
      if(!restricted_.Equals(other.restricted_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      hash ^= ServerOptions.GetHashCode();
      hash ^= ImportOptions.GetHashCode();
      if (RestrictionType != 0) hash ^= RestrictionType.GetHashCode();
      hash ^= restricted_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Schema.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Schema);
      }
      serverOptions_.WriteTo(output, _map_serverOptions_codec);
      importOptions_.WriteTo(output, _map_importOptions_codec);
      if (RestrictionType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RestrictionType);
      }
      restricted_.WriteTo(output, _repeated_restricted_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      size += serverOptions_.CalculateSize(_map_serverOptions_codec);
      size += importOptions_.CalculateSize(_map_importOptions_codec);
      if (RestrictionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RestrictionType);
      }
      size += restricted_.CalculateSize(_repeated_restricted_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportForeignSchemaInput other) {
      if (other == null) {
        return;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
      serverOptions_.Add(other.serverOptions_);
      importOptions_.Add(other.importOptions_);
      if (other.RestrictionType != 0) {
        RestrictionType = other.RestrictionType;
      }
      restricted_.Add(other.restricted_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Schema = input.ReadString();
            break;
          }
          case 18: {
            serverOptions_.AddEntriesFrom(input, _map_serverOptions_codec);
            break;
          }
          case 26: {
            importOptions_.AddEntriesFrom(input, _map_importOptions_codec);
            break;
          }
          case 32: {
            restrictionType_ = (global::PostgresFdw.ImportForeignSchemaInput.Types.RestrictionType) input.ReadEnum();
            break;
          }
          case 42: {
            restricted_.AddEntriesFrom(input, _repeated_restricted_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImportForeignSchemaInput message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RestrictionType {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("LIMIT")] Limit = 1,
        [pbr::OriginalName("EXCEPT")] Except = 2,
      }

    }
    #endregion

  }

  public sealed partial class ImportForeignSchemaOutput : pb::IMessage<ImportForeignSchemaOutput> {
    private static readonly pb::MessageParser<ImportForeignSchemaOutput> _parser = new pb::MessageParser<ImportForeignSchemaOutput>(() => new ImportForeignSchemaOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportForeignSchemaOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PostgresFdw.FdwReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportForeignSchemaOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportForeignSchemaOutput(ImportForeignSchemaOutput other) : this() {
      tables_ = other.tables_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportForeignSchemaOutput Clone() {
      return new ImportForeignSchemaOutput(this);
    }

    /// <summary>Field number for the "tables" field.</summary>
    public const int TablesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PostgresFdw.TableDefinition> _repeated_tables_codec
        = pb::FieldCodec.ForMessage(10, global::PostgresFdw.TableDefinition.Parser);
    private readonly pbc::RepeatedField<global::PostgresFdw.TableDefinition> tables_ = new pbc::RepeatedField<global::PostgresFdw.TableDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PostgresFdw.TableDefinition> Tables {
      get { return tables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportForeignSchemaOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportForeignSchemaOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tables_.Equals(other.tables_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tables_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tables_.WriteTo(output, _repeated_tables_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tables_.CalculateSize(_repeated_tables_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportForeignSchemaOutput other) {
      if (other == null) {
        return;
      }
      tables_.Add(other.tables_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tables_.AddEntriesFrom(input, _repeated_tables_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PerformForeignScanInput : pb::IMessage<PerformForeignScanInput> {
    private static readonly pb::MessageParser<PerformForeignScanInput> _parser = new pb::MessageParser<PerformForeignScanInput>(() => new PerformForeignScanInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PerformForeignScanInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PostgresFdw.FdwReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerformForeignScanInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerformForeignScanInput(PerformForeignScanInput other) : this() {
      columns_ = other.columns_.Clone();
      options_ = other.options_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerformForeignScanInput Clone() {
      return new PerformForeignScanInput(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PostgresFdw.ColumnDefinition> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(10, global::PostgresFdw.ColumnDefinition.Parser);
    private readonly pbc::RepeatedField<global::PostgresFdw.ColumnDefinition> columns_ = new pbc::RepeatedField<global::PostgresFdw.ColumnDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PostgresFdw.ColumnDefinition> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_options_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PerformForeignScanInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PerformForeignScanInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (!Options.Equals(other.Options)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      hash ^= Options.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      columns_.WriteTo(output, _repeated_columns_codec);
      options_.WriteTo(output, _map_options_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += options_.CalculateSize(_map_options_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PerformForeignScanInput other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      options_.Add(other.options_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            options_.AddEntriesFrom(input, _map_options_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Row : pb::IMessage<Row> {
    private static readonly pb::MessageParser<Row> _parser = new pb::MessageParser<Row>(() => new Row());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Row> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PostgresFdw.FdwReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Row() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Row(Row other) : this() {
      fields_ = other.fields_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Row Clone() {
      return new Row(this);
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::PostgresFdw.Row.Types.RowValue>.Codec _map_fields_codec
        = new pbc::MapField<string, global::PostgresFdw.Row.Types.RowValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::PostgresFdw.Row.Types.RowValue.Parser), 10);
    private readonly pbc::MapField<string, global::PostgresFdw.Row.Types.RowValue> fields_ = new pbc::MapField<string, global::PostgresFdw.Row.Types.RowValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::PostgresFdw.Row.Types.RowValue> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Row);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Row other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Fields.Equals(other.Fields)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Fields.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fields_.WriteTo(output, _map_fields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fields_.CalculateSize(_map_fields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Row other) {
      if (other == null) {
        return;
      }
      fields_.Add(other.fields_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fields_.AddEntriesFrom(input, _map_fields_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Row message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RowValue : pb::IMessage<RowValue> {
        private static readonly pb::MessageParser<RowValue> _parser = new pb::MessageParser<RowValue>(() => new RowValue());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RowValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::PostgresFdw.Row.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RowValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RowValue(RowValue other) : this() {
          switch (other.TestOneofCase) {
            case TestOneofOneofCase.StringValue:
              StringValue = other.StringValue;
              break;
            case TestOneofOneofCase.FloatValue:
              FloatValue = other.FloatValue;
              break;
            case TestOneofOneofCase.DoubleValue:
              DoubleValue = other.DoubleValue;
              break;
            case TestOneofOneofCase.IntValue:
              IntValue = other.IntValue;
              break;
            case TestOneofOneofCase.LongValue:
              LongValue = other.LongValue;
              break;
            case TestOneofOneofCase.BoolValue:
              BoolValue = other.BoolValue;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RowValue Clone() {
          return new RowValue(this);
        }

        /// <summary>Field number for the "stringValue" field.</summary>
        public const int StringValueFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringValue {
          get { return testOneofCase_ == TestOneofOneofCase.StringValue ? (string) testOneof_ : ""; }
          set {
            testOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            testOneofCase_ = TestOneofOneofCase.StringValue;
          }
        }

        /// <summary>Field number for the "floatValue" field.</summary>
        public const int FloatValueFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FloatValue {
          get { return testOneofCase_ == TestOneofOneofCase.FloatValue ? (float) testOneof_ : 0F; }
          set {
            testOneof_ = value;
            testOneofCase_ = TestOneofOneofCase.FloatValue;
          }
        }

        /// <summary>Field number for the "doubleValue" field.</summary>
        public const int DoubleValueFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double DoubleValue {
          get { return testOneofCase_ == TestOneofOneofCase.DoubleValue ? (double) testOneof_ : 0D; }
          set {
            testOneof_ = value;
            testOneofCase_ = TestOneofOneofCase.DoubleValue;
          }
        }

        /// <summary>Field number for the "intValue" field.</summary>
        public const int IntValueFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IntValue {
          get { return testOneofCase_ == TestOneofOneofCase.IntValue ? (int) testOneof_ : 0; }
          set {
            testOneof_ = value;
            testOneofCase_ = TestOneofOneofCase.IntValue;
          }
        }

        /// <summary>Field number for the "longValue" field.</summary>
        public const int LongValueFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LongValue {
          get { return testOneofCase_ == TestOneofOneofCase.LongValue ? (long) testOneof_ : 0L; }
          set {
            testOneof_ = value;
            testOneofCase_ = TestOneofOneofCase.LongValue;
          }
        }

        /// <summary>Field number for the "boolValue" field.</summary>
        public const int BoolValueFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BoolValue {
          get { return testOneofCase_ == TestOneofOneofCase.BoolValue ? (bool) testOneof_ : false; }
          set {
            testOneof_ = value;
            testOneofCase_ = TestOneofOneofCase.BoolValue;
          }
        }

        private object testOneof_;
        /// <summary>Enum of possible cases for the "test_oneof" oneof.</summary>
        public enum TestOneofOneofCase {
          None = 0,
          StringValue = 1,
          FloatValue = 2,
          DoubleValue = 3,
          IntValue = 4,
          LongValue = 5,
          BoolValue = 6,
        }
        private TestOneofOneofCase testOneofCase_ = TestOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestOneofOneofCase TestOneofCase {
          get { return testOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTestOneof() {
          testOneofCase_ = TestOneofOneofCase.None;
          testOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RowValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RowValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StringValue != other.StringValue) return false;
          if (FloatValue != other.FloatValue) return false;
          if (DoubleValue != other.DoubleValue) return false;
          if (IntValue != other.IntValue) return false;
          if (LongValue != other.LongValue) return false;
          if (BoolValue != other.BoolValue) return false;
          if (TestOneofCase != other.TestOneofCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (testOneofCase_ == TestOneofOneofCase.StringValue) hash ^= StringValue.GetHashCode();
          if (testOneofCase_ == TestOneofOneofCase.FloatValue) hash ^= FloatValue.GetHashCode();
          if (testOneofCase_ == TestOneofOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
          if (testOneofCase_ == TestOneofOneofCase.IntValue) hash ^= IntValue.GetHashCode();
          if (testOneofCase_ == TestOneofOneofCase.LongValue) hash ^= LongValue.GetHashCode();
          if (testOneofCase_ == TestOneofOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
          hash ^= (int) testOneofCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (testOneofCase_ == TestOneofOneofCase.StringValue) {
            output.WriteRawTag(10);
            output.WriteString(StringValue);
          }
          if (testOneofCase_ == TestOneofOneofCase.FloatValue) {
            output.WriteRawTag(21);
            output.WriteFloat(FloatValue);
          }
          if (testOneofCase_ == TestOneofOneofCase.DoubleValue) {
            output.WriteRawTag(25);
            output.WriteDouble(DoubleValue);
          }
          if (testOneofCase_ == TestOneofOneofCase.IntValue) {
            output.WriteRawTag(32);
            output.WriteInt32(IntValue);
          }
          if (testOneofCase_ == TestOneofOneofCase.LongValue) {
            output.WriteRawTag(40);
            output.WriteInt64(LongValue);
          }
          if (testOneofCase_ == TestOneofOneofCase.BoolValue) {
            output.WriteRawTag(48);
            output.WriteBool(BoolValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (testOneofCase_ == TestOneofOneofCase.StringValue) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
          }
          if (testOneofCase_ == TestOneofOneofCase.FloatValue) {
            size += 1 + 4;
          }
          if (testOneofCase_ == TestOneofOneofCase.DoubleValue) {
            size += 1 + 8;
          }
          if (testOneofCase_ == TestOneofOneofCase.IntValue) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntValue);
          }
          if (testOneofCase_ == TestOneofOneofCase.LongValue) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongValue);
          }
          if (testOneofCase_ == TestOneofOneofCase.BoolValue) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RowValue other) {
          if (other == null) {
            return;
          }
          switch (other.TestOneofCase) {
            case TestOneofOneofCase.StringValue:
              StringValue = other.StringValue;
              break;
            case TestOneofOneofCase.FloatValue:
              FloatValue = other.FloatValue;
              break;
            case TestOneofOneofCase.DoubleValue:
              DoubleValue = other.DoubleValue;
              break;
            case TestOneofOneofCase.IntValue:
              IntValue = other.IntValue;
              break;
            case TestOneofOneofCase.LongValue:
              LongValue = other.LongValue;
              break;
            case TestOneofOneofCase.BoolValue:
              BoolValue = other.BoolValue;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                StringValue = input.ReadString();
                break;
              }
              case 21: {
                FloatValue = input.ReadFloat();
                break;
              }
              case 25: {
                DoubleValue = input.ReadDouble();
                break;
              }
              case 32: {
                IntValue = input.ReadInt32();
                break;
              }
              case 40: {
                LongValue = input.ReadInt64();
                break;
              }
              case 48: {
                BoolValue = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class PerformForeignScanOutput : pb::IMessage<PerformForeignScanOutput> {
    private static readonly pb::MessageParser<PerformForeignScanOutput> _parser = new pb::MessageParser<PerformForeignScanOutput>(() => new PerformForeignScanOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PerformForeignScanOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PostgresFdw.FdwReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerformForeignScanOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerformForeignScanOutput(PerformForeignScanOutput other) : this() {
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerformForeignScanOutput Clone() {
      return new PerformForeignScanOutput(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PostgresFdw.Row> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::PostgresFdw.Row.Parser);
    private readonly pbc::RepeatedField<global::PostgresFdw.Row> rows_ = new pbc::RepeatedField<global::PostgresFdw.Row>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PostgresFdw.Row> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PerformForeignScanOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PerformForeignScanOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PerformForeignScanOutput other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
