syntax = "proto3";

package PostgresFdw;

service PostgresFdw {
    rpc PerformForeignScan(PerformForeignScanInput) returns (stream PerformForeignScanOutput) {}
    rpc ImportForeignSchema(ImportForeignSchemaInput) returns (ImportForeignSchemaOutput) {}
}

message ColumnDefinition {
    string name = 1;
    int32 oid = 2; // the internal OID of the PostgreSQL type
    int32 mod = 3; // the type modifier (ex: VARCHAR(12))
    string typeName = 4; // the formatted type name, with the modifier (ex: VARCHAR(12))
    string baseTypeName = 5; // the base type name, withou modifier (ex: VARCHAR)
    map<string, string> options = 6;
}

message TableDefinition {
    string name = 1;
    repeated ColumnDefinition columns = 2;
    map<string, string> options = 3;
}

message ImportForeignSchemaInput {
    string schema = 1;
    map<string, string> serverOptions = 2;
    map<string, string> importOptions = 3;
    
    enum RestrictionType {
        NONE = 0;
        LIMIT = 1;
        EXCEPT = 2;
    }
    
    RestrictionType restrictionType = 4;
    repeated string restricted = 5;
}

message ImportForeignSchemaOutput {
    repeated TableDefinition tables = 1;
}

message PerformForeignScanInput {
    repeated ColumnDefinition columns = 1;
    map<string, string> options = 2;
}

message Row {
    message RowValue {
        oneof test_oneof {
            string stringValue = 1;
            float floatValue = 2;
            double doubleValue = 3;
            int32 intValue = 4;
            int64 longValue = 5;
            bool boolValue = 6;
        }
    }

    map<string, RowValue> fields = 1;
}

message PerformForeignScanOutput {
    repeated Row rows = 1;
}

